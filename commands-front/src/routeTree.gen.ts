/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AudienceIndexRouteImport } from './routes/audience/index'
import { Route as ActorIndexRouteImport } from './routes/actor/index'
import { Route as AudienceSessionIdIndexRouteImport } from './routes/audience/$sessionId/index'
import { Route as ActorSessionIdIndexRouteImport } from './routes/actor/$sessionId/index'
import { Route as AudienceSessionIdRoleNameRouteImport } from './routes/audience/$sessionId/$roleName'
import { Route as ActorSessionIdRoleNameRouteImport } from './routes/actor/$sessionId/$roleName'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AudienceIndexRoute = AudienceIndexRouteImport.update({
  id: '/audience/',
  path: '/audience/',
  getParentRoute: () => rootRouteImport,
} as any)
const ActorIndexRoute = ActorIndexRouteImport.update({
  id: '/actor/',
  path: '/actor/',
  getParentRoute: () => rootRouteImport,
} as any)
const AudienceSessionIdIndexRoute = AudienceSessionIdIndexRouteImport.update({
  id: '/audience/$sessionId/',
  path: '/audience/$sessionId/',
  getParentRoute: () => rootRouteImport,
} as any)
const ActorSessionIdIndexRoute = ActorSessionIdIndexRouteImport.update({
  id: '/actor/$sessionId/',
  path: '/actor/$sessionId/',
  getParentRoute: () => rootRouteImport,
} as any)
const AudienceSessionIdRoleNameRoute =
  AudienceSessionIdRoleNameRouteImport.update({
    id: '/audience/$sessionId/$roleName',
    path: '/audience/$sessionId/$roleName',
    getParentRoute: () => rootRouteImport,
  } as any)
const ActorSessionIdRoleNameRoute = ActorSessionIdRoleNameRouteImport.update({
  id: '/actor/$sessionId/$roleName',
  path: '/actor/$sessionId/$roleName',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/actor': typeof ActorIndexRoute
  '/audience': typeof AudienceIndexRoute
  '/actor/$sessionId/$roleName': typeof ActorSessionIdRoleNameRoute
  '/audience/$sessionId/$roleName': typeof AudienceSessionIdRoleNameRoute
  '/actor/$sessionId': typeof ActorSessionIdIndexRoute
  '/audience/$sessionId': typeof AudienceSessionIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/actor': typeof ActorIndexRoute
  '/audience': typeof AudienceIndexRoute
  '/actor/$sessionId/$roleName': typeof ActorSessionIdRoleNameRoute
  '/audience/$sessionId/$roleName': typeof AudienceSessionIdRoleNameRoute
  '/actor/$sessionId': typeof ActorSessionIdIndexRoute
  '/audience/$sessionId': typeof AudienceSessionIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/actor/': typeof ActorIndexRoute
  '/audience/': typeof AudienceIndexRoute
  '/actor/$sessionId/$roleName': typeof ActorSessionIdRoleNameRoute
  '/audience/$sessionId/$roleName': typeof AudienceSessionIdRoleNameRoute
  '/actor/$sessionId/': typeof ActorSessionIdIndexRoute
  '/audience/$sessionId/': typeof AudienceSessionIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/actor'
    | '/audience'
    | '/actor/$sessionId/$roleName'
    | '/audience/$sessionId/$roleName'
    | '/actor/$sessionId'
    | '/audience/$sessionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/actor'
    | '/audience'
    | '/actor/$sessionId/$roleName'
    | '/audience/$sessionId/$roleName'
    | '/actor/$sessionId'
    | '/audience/$sessionId'
  id:
    | '__root__'
    | '/'
    | '/actor/'
    | '/audience/'
    | '/actor/$sessionId/$roleName'
    | '/audience/$sessionId/$roleName'
    | '/actor/$sessionId/'
    | '/audience/$sessionId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActorIndexRoute: typeof ActorIndexRoute
  AudienceIndexRoute: typeof AudienceIndexRoute
  ActorSessionIdRoleNameRoute: typeof ActorSessionIdRoleNameRoute
  AudienceSessionIdRoleNameRoute: typeof AudienceSessionIdRoleNameRoute
  ActorSessionIdIndexRoute: typeof ActorSessionIdIndexRoute
  AudienceSessionIdIndexRoute: typeof AudienceSessionIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/audience/': {
      id: '/audience/'
      path: '/audience'
      fullPath: '/audience'
      preLoaderRoute: typeof AudienceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/actor/': {
      id: '/actor/'
      path: '/actor'
      fullPath: '/actor'
      preLoaderRoute: typeof ActorIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/audience/$sessionId/': {
      id: '/audience/$sessionId/'
      path: '/audience/$sessionId'
      fullPath: '/audience/$sessionId'
      preLoaderRoute: typeof AudienceSessionIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/actor/$sessionId/': {
      id: '/actor/$sessionId/'
      path: '/actor/$sessionId'
      fullPath: '/actor/$sessionId'
      preLoaderRoute: typeof ActorSessionIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/audience/$sessionId/$roleName': {
      id: '/audience/$sessionId/$roleName'
      path: '/audience/$sessionId/$roleName'
      fullPath: '/audience/$sessionId/$roleName'
      preLoaderRoute: typeof AudienceSessionIdRoleNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/actor/$sessionId/$roleName': {
      id: '/actor/$sessionId/$roleName'
      path: '/actor/$sessionId/$roleName'
      fullPath: '/actor/$sessionId/$roleName'
      preLoaderRoute: typeof ActorSessionIdRoleNameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActorIndexRoute: ActorIndexRoute,
  AudienceIndexRoute: AudienceIndexRoute,
  ActorSessionIdRoleNameRoute: ActorSessionIdRoleNameRoute,
  AudienceSessionIdRoleNameRoute: AudienceSessionIdRoleNameRoute,
  ActorSessionIdIndexRoute: ActorSessionIdIndexRoute,
  AudienceSessionIdIndexRoute: AudienceSessionIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
