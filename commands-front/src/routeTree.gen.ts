/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AudienceIndexRouteImport } from './routes/audience/index'
import { Route as ActorIndexRouteImport } from './routes/actor/index'
import { Route as AudienceRoleNameRouteImport } from './routes/audience/$roleName'
import { Route as ActorRoleNameRouteImport } from './routes/actor/$roleName'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AudienceIndexRoute = AudienceIndexRouteImport.update({
  id: '/audience/',
  path: '/audience/',
  getParentRoute: () => rootRouteImport,
} as any)
const ActorIndexRoute = ActorIndexRouteImport.update({
  id: '/actor/',
  path: '/actor/',
  getParentRoute: () => rootRouteImport,
} as any)
const AudienceRoleNameRoute = AudienceRoleNameRouteImport.update({
  id: '/audience/$roleName',
  path: '/audience/$roleName',
  getParentRoute: () => rootRouteImport,
} as any)
const ActorRoleNameRoute = ActorRoleNameRouteImport.update({
  id: '/actor/$roleName',
  path: '/actor/$roleName',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/actor/$roleName': typeof ActorRoleNameRoute
  '/audience/$roleName': typeof AudienceRoleNameRoute
  '/actor': typeof ActorIndexRoute
  '/audience': typeof AudienceIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/actor/$roleName': typeof ActorRoleNameRoute
  '/audience/$roleName': typeof AudienceRoleNameRoute
  '/actor': typeof ActorIndexRoute
  '/audience': typeof AudienceIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/actor/$roleName': typeof ActorRoleNameRoute
  '/audience/$roleName': typeof AudienceRoleNameRoute
  '/actor/': typeof ActorIndexRoute
  '/audience/': typeof AudienceIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/actor/$roleName'
    | '/audience/$roleName'
    | '/actor'
    | '/audience'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/actor/$roleName' | '/audience/$roleName' | '/actor' | '/audience'
  id:
    | '__root__'
    | '/'
    | '/actor/$roleName'
    | '/audience/$roleName'
    | '/actor/'
    | '/audience/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActorRoleNameRoute: typeof ActorRoleNameRoute
  AudienceRoleNameRoute: typeof AudienceRoleNameRoute
  ActorIndexRoute: typeof ActorIndexRoute
  AudienceIndexRoute: typeof AudienceIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/audience/': {
      id: '/audience/'
      path: '/audience'
      fullPath: '/audience'
      preLoaderRoute: typeof AudienceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/actor/': {
      id: '/actor/'
      path: '/actor'
      fullPath: '/actor'
      preLoaderRoute: typeof ActorIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/audience/$roleName': {
      id: '/audience/$roleName'
      path: '/audience/$roleName'
      fullPath: '/audience/$roleName'
      preLoaderRoute: typeof AudienceRoleNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/actor/$roleName': {
      id: '/actor/$roleName'
      path: '/actor/$roleName'
      fullPath: '/actor/$roleName'
      preLoaderRoute: typeof ActorRoleNameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActorRoleNameRoute: ActorRoleNameRoute,
  AudienceRoleNameRoute: AudienceRoleNameRoute,
  ActorIndexRoute: ActorIndexRoute,
  AudienceIndexRoute: AudienceIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
